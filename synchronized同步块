package com.by.jsource.jac;

public class A {

	// synchronized
	public static void main(String[] args) {

		zThread z = new zThread();

		Thread t1 =  new Thread(z, "zt1");
		Thread t2 =  new Thread(z, "zt2");
    
		t1.start();
		t2.start();

	}

}

class zThread implements Runnable {

	private static int count;

	public int getCount() {
		return count;
	}

	public zThread() {
		count = 0;
	}

	@Override
	public void run() {
//		synchronized (this) {
			for (int i = 0; i < 7; i++) {
				try {
					System.out.println(Thread.currentThread().getName() + ":" + (count++));
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
//		}

	}

}

// synchronized 的作用
// 当线程访问到synchronized中的代码时，两个线程不会抢夺资源；
// 若是没有synchronized，则两个线程会抢夺资源，导致执行的顺序和结果发生改变
