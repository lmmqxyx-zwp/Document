java中为什么要使用代理
============================================================================

代理模式
============================================================================
- 代理模式的作用是：
	为其他对象提供一种代理以控制对这个对象的访问。在某些情
况下，一个客户不想或者不能直接引用另一个对象，而代理对象可以在客户端和目标对
象之间起到中介的作用。

- 代理模式一般涉及到的角色有： 
	------------------------------------------------------------------------
	抽象角色：声明真实对象和代理对象的共同接口；
	------------------------------------------------------------------------
	代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同
	时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，
	代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封
	装。
	------------------------------------------------------------------------
	真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。
	
动态代理类 
============================================================================
- Java动态代理类位于Java.lang.reflect包下，一般主要涉及到以下两个类：
	------------------------------------------------------------------------
	(1). Interface InvocationHandler：该接口中仅定义了一个方法Object：invoke
	(Object obj,Method method, J2EEjava语言JDK1.4APIjavalangObject.html">Obj
	ect[] args)。在实际使用时，第一个参数obj一般是指代理类，method是被代理的
	方法，如上例中的request()，args为该方法的参数数组。这个抽象方法在代理类
	中动态实现。 
	------------------------------------------------------------------------
	(2).Proxy：该类即为动态代理类，作用类似于上例中的ProxySubject，其中主要包
	含以下内容： 
		Protected Proxy(InvocationHandler h)：构造函数，估计用于给内部的h赋值 
		--------------------------------------------------------------------
		Static Class getProxyClass (ClassLoader loader, Class[] interfaces)：
		获得一个代理类，其中loader是类装载器，interfaces是真实类所拥有的全部
		接口的数组。 
		--------------------------------------------------------------------
		Static Object newProxyInstance(ClassLoader loader, Class[] interfaces,
		InvocationHandler h)：返回代理类的一个实例，返回后的代理类可以当作被
		代理类使用(可使用被代理类的在Subject接口中声明过的方法)。
		--------------------------------------------------------------------
		所谓Dynamic Proxy是这样一种class：它是在运行时生成的class，在生成它时
		你必须提供一组interface给它，然后该class就宣称它实现了这些interface。
		你当然可以把该class的实例当作这些interface中的任何一个来用。当然啦，
		这个Dynamic Proxy其实就是一个Proxy，它不会替你作实质性的工作，在生成
		它的实例时你必须提供一个handler，由它接管实际的工作。
		--------------------------------------------------------------------
	
	
	
	