架构 - restful
============================================================================
	REST是英文representational state transfer(表象性状态转变)或者表述性状态转
移;Rest是web服务的一种架构风格;使用HTTP,URI,XML,JSON,HTML等广泛流行的标准和协
议;轻量级,跨平台,跨语言的架构设计;它是一种设计风格,不是一种标准,是一种思想。

Rest架构的主要原则
----------------------------------------------------------------------------
	网络上的所有事物都被抽象为资源
    每个资源都有一个唯一的资源标识符
    同一个资源具有多种表现形式(xml,json等)
    对资源的各种操作不会改变资源标识符
    所有的操作都是无状态的
    符合REST原则的架构方式即可称为RESTful

什么是Restful:
----------------------------------------------------------------------------
	对应的中文是rest式的;Restful web service是一种常见的rest的应用,是遵守了r
est风格的web服务;rest式的web服务是一种ROA(The Resource-Oriented Architecture
)(面向资源的架构).

在Restful之前的操作：
----------------------------------------------------------------------------
	http://127.0.0.1/user/query/1 	GET  根据用户id查询用户数据
	http://127.0.0.1/user/save 		POST 新增用户
	http://127.0.0.1/user/update 	POST 修改用户信息
	http://127.0.0.1/user/delete 	GET/POST 删除用户信息

RESTful用法：
----------------------------------------------------------------------------
	http://127.0.0.1/user/1 		GET  根据用户id查询用户数据
	http://127.0.0.1/user  			POST 新增用户
	http://127.0.0.1/user  			PUT 修改用户信息
	http://127.0.0.1/user  			DELETE 删除用户信息

----------------------------------------------------------------------------
----------------------------------------------------------------------------
	之前的操作是没有问题的,有什么问题呢?你每次请求的接口或者地址,都在做描述,
例如查询的时候用了query,新增的时候用了save,其实完全没有这个必要,我使用了get
请求,就是查询.使用post请求,就是新增的请求,我的意图很明显,完全没有必要做描述,
这就是为什么有了restful.
----------------------------------------------------------------------------
----------------------------------------------------------------------------
	幂等性：对同一rest接口的多次访问、得到的资源状态是相同的
	安全性：对该rest接口访问、不会使服务器端的资源状态发生改变
----------------------------------------------------------------------------
----------------------------------------------------------------------------

SpringMVC实现restful服务:
============================================================================
	SpringMVC原生态的支持了REST风格的架构设计
	所涉及到的注解:
	- @RequestMapping
	- @PathVariable
	- @ResponseBody
----------------------------------------------------------------------------
@RequestMapping("restful/user")  
@Controller 
public class RestUserController {
	@Autowired
    private NewUserService newUserService; 
	
	@RequestMapping(value = "{id}", method = RequestMethod.GET)  
    @ResponseBody 
	public ResponseEntity<User> queryUserById(@PathVariable("id") Long id) { 
		
	}
	
	@RequestMapping(method = RequestMethod.POST)
	public ResponseEntity<Void> saveUser(User user) {
		
	}
	
	@RequestMapping(method = RequestMethod.PUT)
    public ResponseEntity<Void> updateUser(User user) {  
		
	}
	
	@RequestMapping(method = RequestMethod.DELETE)
    public ResponseEntity<Void> deleteUser(@RequestParam(value = "id", 
		defaultValue = "0") Long id) {
	
	}
}
----------------------------------------------------------------------------
调用：
	- method不同
	- 测试可以使用ajax调用
	
HTTP提交请求的方式
	根据HTTP标准，HTTP请求可以使用多种请求方法
	HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法
	HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法
	
	------------------------------------------------------------------------
	序号		方法		描述
	1			GET			请求指定的页面信息，并返回实体主体。
	2			HEAD		类似于get请求，只不过返回的响应中没有具体的内容
							用于获取报头
	3			POST		向指定资源提交数据进行处理请求 - 例如提交表单或
							者上传文件数据被包含在请求体中 - POST请求可能会
							导致新的资源的建立和/或已有资源的修改
	4			PUT			从客户端向服务器传送的数据取代指定的文档的内容
	5			DELETE		请求服务器删除指定的页面
	6			CONNECT		HTTP/1.1协议中预留给能够将连接改为管道方式的代
							理服务器
	7			OPTIONS		允许客户端查看服务器的性能
	8			TRACE		回显服务器收到的请求，主要用于测试或诊断
	------------------------------------------------------------------------
	
	GET方法提交数据，可能会带来安全性的问题，数据被浏览器缓存
	
	HEAD类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头
	
	PUT从客户端向服务器传送的数据取代指定的文档的内容
	
	DELETE请求服务器删除指定的页面
		DELETE请求一般返回3种码
		- 200
		- 202
		- 204
	
	CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器
	
	OPTIONS 允许客户端查看服务器的性能
	
	TRACE 回显服务器收到的请求，主要用于测试或诊断
	